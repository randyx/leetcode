/*
二分查找
*/
#include<iostream>
using namespace std;
int binary_search(int L[10],int key);
void main(){
	int L1[10]={1,3,4,6,8,9,11,15,21,56};
	int key1;
	cin>>key1;
	//int index=binary_search(L1,key1);
	cout<<"index is"<<binary_search(L1,key1);
}
int binary_search(int L[10],int key){
	int low=0;
	//int m=(sizeof(L)/sizeof(L[0]));
	//cout << m;
	int high=9;
	int between; 
	while(low<=high){
		between=(high+low)/2;
		if(key==L[between])return between;
		else if(key<L[between]) high=between-1;
		else low=between+1;
	}
	return -1;
}

////////////////////////////////////////////////////
找出一个字符串中首先出现两次的字符输出
////////////////////////////////////////////////////
#include<iostream>
#include<string>
using namespace std;
char zifu(string target);
int main(){
/*	char a[10]="Hello";
	char* str="Hello";
	cout<<*str<<endl;
	cout<<str<<endl;
	cout<<a<<endl;*/
	string target1;//vc 6.0bug   target1.at(1)
	getline(cin,target1);
	//cout<<target1<<endl<<target1.size()<<endl<<target1.at(1)<<endl<<target1[1]<<endl;
	cout<<zifu(target1)<<endl;
}
char zifu(string target){
	string::size_type position;
	int m=0;
	while(m<target.size()){
	position=target.find(target[m],m+1);
	if (position!=string::npos) return target[m];
	m=m+1;
	}
}

/////////////////////////////////////////////
选取文本行中，带有you的行输出
////////////////////////////////////////////
#include<iostream>
#include<sstream>
#include<fstream>
#include<string>
using namespace std;
int main(){
	ifstream in("1.txt");
	for(string s;getline(in,s);){
		string::size_type position;
		position=s.find("you");
		if(position==string::npos) continue;
		cout<<s<<endl;
	}
	cout<<s;
	return 0;
}